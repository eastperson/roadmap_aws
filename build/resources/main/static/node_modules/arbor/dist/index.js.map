{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/commands/run.command.ts","webpack:///./src/commands/script.command.ts","webpack:///./src/helpers/error.helpers.ts","webpack:///./src/helpers/progress.helpers.ts","webpack:///./src/index.ts","webpack:///./src/interfaces/running-task.ts","webpack:///./src/providers.ts","webpack:///./src/services/arbor-program.service.ts","webpack:///./src/services/config.service.ts","webpack:///./src/services/console.service.ts","webpack:///./src/services/dependency-graph.service.ts","webpack:///./src/services/log.service.ts","webpack:///./src/services/progress.service.ts","webpack:///./src/services/project.service.ts","webpack:///./src/services/script.service.ts","webpack:///./src/services/shell.service.ts","webpack:///./src/services/task-runner.service.ts","webpack:///./src/services/task.service.ts","webpack:///./src/services/version.service.ts","webpack:///external \"chalk\"","webpack:///external \"child_process\"","webpack:///external \"dependency-graph\"","webpack:///external \"fs\"","webpack:///external \"injection-js\"","webpack:///external \"path\"","webpack:///external \"readline\"","webpack:///external \"reflect-metadata\"","webpack:///external \"yargs\""],"names":[],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.ts\");\n","import { Injectable } from 'injection-js';\r\n\r\nimport { TaskRunnerService } from './../services/task-runner.service';\r\n\r\nexport interface RunOptions {\r\n  cwd: string;\r\n  retryPrompt: boolean;\r\n}\r\n\r\n@Injectable()\r\nexport class RunCommand {\r\n  constructor(private taskRunner: TaskRunnerService) { }\r\n\r\n  run(taskFlags: string[], options: RunOptions) {\r\n    if (options.cwd && options.cwd.length) {\r\n      this.chdir(options.cwd);\r\n    }\r\n\r\n    this.taskRunner.runTasks(taskFlags, options);\r\n  }\r\n\r\n  private chdir(cwd: string) {\r\n    try {\r\n      process.chdir(cwd);\r\n    } catch (e) {\r\n      console.log(`fatal: error changing directory to ${cwd}.`);\r\n      process.exit(1);\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from 'injection-js';\r\n\r\nimport { ScriptService } from './../services/script.service';\r\n\r\nexport interface ScriptOptions {\r\n  output: string;\r\n  dryRun: boolean;\r\n}\r\n\r\n@Injectable()\r\nexport class ScriptCommand {\r\n  constructor(private scriptService: ScriptService) { }\r\n\r\n  run(taskFlags: string[], options: ScriptOptions) {\r\n    this.scriptService.generateScript(taskFlags, options);\r\n  }\r\n}\r\n","\r\nimport chalk from 'chalk';\r\n\r\nexport function bail(message: string) {\r\n  console.error(chalk.red(`Error: ${message}`));\r\n  process.exit(1);\r\n}\r\n","import chalk from 'chalk';\r\n\r\nimport { RunningTask, TaskStatus } from './../interfaces/running-task';\r\n\r\nexport function getStatusText(runningTask: RunningTask) {\r\n  const defaultStatus = getDefaultStatusText(runningTask.taskFlag);\r\n\r\n  let statusText;\r\n\r\n  switch (runningTask.status) {\r\n    case TaskStatus.Waiting:\r\n      statusText = chalk.gray('waiting...');\r\n      break;\r\n    case TaskStatus.Success:\r\n      statusText = chalk.green('done!');\r\n      break;\r\n    case TaskStatus.Failed:\r\n      statusText = chalk.red('failed!');\r\n      break;\r\n    case TaskStatus.DependendecyFailed:\r\n      statusText = chalk.red('dependency failed!');\r\n      break;\r\n    case TaskStatus.InProgress:\r\n      const showProgressLine = runningTask.currentCommand.noProgress !== true;\r\n      const status = `${runningTask.statusText ? runningTask.statusText : defaultStatus}...`;\r\n      const progress = showProgressLine && runningTask.progressLogLine ? runningTask.progressLogLine : '';\r\n\r\n      statusText = `${chalk.yellow(status)} ${chalk.gray(progress)}`;\r\n      break;\r\n    default:\r\n      throw new Error(`Unkown task status '${runningTask.status}' in project '${runningTask.project.name}.'`);\r\n  }\r\n\r\n  return statusText;\r\n}\r\n\r\nfunction getDefaultStatusText(taskFlag: string): string {\r\n  let status = 'in progress';\r\n\r\n  if (taskFlag.indexOf('clean') > -1) {\r\n    status = 'cleaning';\r\n  } else if (taskFlag.indexOf('clone') > -1) {\r\n    status = 'cloning';\r\n  } else if (taskFlag.indexOf('install') > -1) {\r\n    status = 'installing';\r\n  } else if (taskFlag.indexOf('build') > -1) {\r\n    status = 'building';\r\n  } else if (taskFlag.indexOf('test') > -1) {\r\n    status = 'testing';\r\n  }\r\n\r\n  return status;\r\n}\r\n","import 'reflect-metadata';\r\n\r\nimport { ReflectiveInjector } from 'injection-js';\r\n\r\nimport { providers } from './providers';\r\nimport { ArborProgramService } from './services/arbor-program.service';\r\n\r\nconst injector = ReflectiveInjector.resolveAndCreate(providers);\r\nconst program: ArborProgramService = injector.get(ArborProgramService);\r\n\r\nprogram.run();\r\n","import { Project, TaskCommand } from './project';\r\n\r\nexport enum TaskStatus {\r\n  Waiting,\r\n  InProgress,\r\n  Success,\r\n  Failed,\r\n  DependendecyFailed\r\n}\r\n\r\nexport interface RunningTask {\r\n  project: Project;\r\n  taskFlag: string;\r\n  status: TaskStatus;\r\n  currentCommand?: TaskCommand;\r\n  progressLogLine?: string;\r\n  statusText?: string;\r\n}\r\n","import { RunCommand } from './commands/run.command';\r\nimport { ScriptCommand } from './commands/script.command';\r\nimport { ArborProgramService } from './services/arbor-program.service';\r\nimport { ConfigService } from './services/config.service';\r\nimport { ConsoleService } from './services/console.service';\r\nimport { DependencyGraphService } from './services/dependency-graph.service';\r\nimport { LogService } from './services/log.service';\r\nimport { ProgressService } from './services/progress.service';\r\nimport { ProjectService } from './services/project.service';\r\nimport { ScriptService } from './services/script.service';\r\nimport { ShellService } from './services/shell.service';\r\nimport { TaskRunnerService } from './services/task-runner.service';\r\nimport { TaskService } from './services/task.service';\r\nimport { VersionService } from './services/version.service';\r\n\r\nexport const providers = [\r\n  ArborProgramService,\r\n  ConfigService,\r\n  ConsoleService,\r\n  DependencyGraphService,\r\n  LogService,\r\n  ProgressService,\r\n  ProjectService,\r\n  RunCommand,\r\n  ScriptCommand,\r\n  ScriptService,\r\n  ShellService,\r\n  TaskRunnerService,\r\n  TaskService,\r\n  VersionService\r\n];\r\n","import { Injectable } from 'injection-js';\r\nimport * as yargs from 'yargs';\r\n\r\nimport { RunCommand } from './../commands/run.command';\r\nimport { ScriptCommand } from './../commands/script.command';\r\nimport { ConfigService } from './config.service';\r\nimport { VersionService } from './version.service';\r\n\r\n@Injectable()\r\nexport class ArborProgramService {\r\n  constructor(\r\n    private configService: ConfigService,\r\n    private runCommand: RunCommand,\r\n    private scriptCommand: ScriptCommand,\r\n    private versionService: VersionService\r\n  ) { }\r\n\r\n  run() {\r\n    this.versionService.checkForUpdate('arbor')\r\n      .then(() => this.registerCommands())\r\n      .then(() => yargs.argv);\r\n  }\r\n\r\n  private registerCommands() {\r\n    yargs.version(VersionService.version);\r\n\r\n    yargs\r\n      .command('init', 'Create a new Arbor config', yargs2 => yargs2,\r\n      () => { this.configService.createArborConfig(); });\r\n\r\n    yargs\r\n      .command('run <tasks...>', 'Run a given list of Arbor tasks in the current working directory.', yargs2 => yargs2\r\n      .option('cwd', { default: '.', description: 'Override the current working directory.' })\r\n      .option('retry-prompt', { default: true, description: 'Prompt to retry tasks after failure.' }),\r\n      args => { this.runCommand.run(args.tasks as any, { cwd: args.cwd, retryPrompt: !!args.retryPrompt }); });\r\n\r\n    yargs\r\n      .command('script <tasks...>', 'Generate a script to run the given list of Arbor tasks in the current working directory.', yargs2 => yargs2\r\n      .option('output', { default: 'build.bat', description: 'Filename to write script.' })\r\n      .option('dry-run', { default: false, description: 'Skip writing the output file.' }),\r\n      args => { this.scriptCommand.run(args.tasks as any, { output: args.output, dryRun: !!args.dryRun }); });\r\n  }\r\n}\r\n","import chalk from 'chalk';\r\nimport * as fs from 'fs';\r\nimport { Injectable } from 'injection-js';\r\n\r\nimport { ConsoleService } from './../services/console.service';\r\n\r\n@Injectable()\r\nexport class ConfigService {\r\n  constructor(private console: ConsoleService) {\r\n  }\r\n\r\n  createArborConfig() {\r\n    const config = `{\r\n  \"name\": \"project-name\",\r\n  \"tasks\": {\r\n    \"install\": \"\",\r\n    \"lint\": \"\",\r\n    \"test\": \"\",\r\n    \"build\": \"\",\r\n    \"build--prod\": \"\",\r\n    \"deploy\": \"\"\r\n  },\r\n  \"external\": [],\r\n  \"dependencies\": []\r\n}\r\n  `;\r\n\r\n    fs.writeFile('arbor.json', config, 'utf8', () => {\r\n      this.console.log(`${chalk.green('Created new arbor.json config')}`);\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from 'injection-js';\r\nimport * as readline from 'readline';\r\n\r\n@Injectable()\r\nexport class ConsoleService {\r\n  private consoleContents = '';\r\n  private currentProgress = '';\r\n\r\n  log(output?: string) {\r\n    this.consoleContents += `${output ? output : ''}\\n`;\r\n    this.update();\r\n  }\r\n\r\n  question(prompt: string): Promise<string> {\r\n    const reader = readline.createInterface({ input: process.stdin, output: process.stdout });\r\n\r\n    return new Promise<string>(resolve => {\r\n      reader.question(`\\n${prompt}`, response => {\r\n        reader.close();\r\n        this.consoleContents += `${prompt}${response}\\n`;\r\n        this.update();\r\n\r\n        resolve(response);\r\n      });\r\n    });\r\n  }\r\n\r\n  progress(output: string) {\r\n    if (this.currentProgress !== output) {\r\n      this.currentProgress = output;\r\n      this.update();\r\n    }\r\n  }\r\n\r\n  finalizeProgress() {\r\n    this.consoleContents += `\\n${this.currentProgress}\\n\\n`;\r\n    this.currentProgress = '';\r\n\r\n    this.update();\r\n  }\r\n\r\n  private update() {\r\n    console.log(`\\x1Bc${this.consoleContents}\\n${this.currentProgress}`.trim());\r\n  }\r\n}\r\n","import { DepGraph } from 'dependency-graph';\r\nimport { Injectable } from 'injection-js';\r\n\r\nimport { Project } from './../interfaces/project';\r\n\r\n@Injectable()\r\nexport class DependencyGraphService {\r\n  constructor() { }\r\n\r\n  orderProjectsByDependencyGraph(projects: Project[]): Project[] {\r\n    const dependencyGraph = new DepGraph<Project>();\r\n\r\n    for (const project of projects) {\r\n      dependencyGraph.addNode(project.name, project);\r\n    }\r\n\r\n    for (const dependant of projects) {\r\n      if (dependant.dependencies && dependant.dependencies.length) {\r\n        for (const depencency of dependant.dependencies) {\r\n          if (dependencyGraph.hasNode(depencency)) {\r\n            dependencyGraph.addDependency(dependant.name, depencency);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return dependencyGraph.overallOrder()\r\n      .map(projectName => dependencyGraph.getNodeData(projectName));\r\n  }\r\n}\r\n","import * as fs from 'fs';\r\nimport { Injectable } from 'injection-js';\r\n\r\nconst errorLogFile = 'arbor-error.log';\r\nconst infoLogFile = 'arbor-info.log';\r\n\r\n@Injectable()\r\nexport class LogService {\r\n  log(output: string, error: boolean) {\r\n    if (output) {\r\n      const file = error ? errorLogFile : infoLogFile;\r\n      const outputToWrite = output.replace(/\\r\\n|\\r|\\n/g, '\\r\\n');\r\n\r\n      fs.appendFileSync(file, outputToWrite);\r\n    }\r\n  }\r\n\r\n  deleteLogs() {\r\n    for (const file of [errorLogFile, infoLogFile]) {\r\n      if (fs.existsSync(file)) {\r\n        fs.unlinkSync(file);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from 'injection-js';\r\n\r\nimport { getStatusText } from '../helpers/progress.helpers';\r\nimport { RunningTask, } from './../interfaces/running-task';\r\nimport { ConsoleService } from './../services/console.service';\r\n\r\n@Injectable()\r\nexport class ProgressService {\r\n\r\n  constructor(private console: ConsoleService) { }\r\n\r\n  updateRunningTasks(runningTasks: RunningTask[]) {\r\n    const output = runningTasks\r\n      .map(runningTask => `  ${runningTask.project.name}: ${getStatusText(runningTask)}`)\r\n      .join('\\n');\r\n\r\n    this.console.progress(output);\r\n  }\r\n\r\n  finalizeRunningTasks() {\r\n    this.console.finalizeProgress();\r\n  }\r\n}\r\n","import * as fs from 'fs';\r\nimport { Injectable } from 'injection-js';\r\nimport * as path from 'path';\r\n\r\nimport { bail } from './../helpers/error.helpers';\r\nimport { ProjectSchema } from './../interfaces/project';\r\n\r\n@Injectable()\r\nexport class ProjectService {\r\n  constructor() {\r\n  }\r\n\r\n  getProjects() {\r\n    const configFiles = this.getConfigs('./');\r\n\r\n    return this.readProjects(configFiles)\r\n      .then(projects => this.validateProjects(projects));\r\n  }\r\n\r\n  private getConfigs(dir: string, filelist: string[] = []): string[] {\r\n    const filePaths = fs.readdirSync(dir);\r\n    for (const filePath of filePaths) {\r\n      const absolutePath = path.join(dir, filePath);\r\n      if (fs.statSync(absolutePath).isDirectory() && !absolutePath.includes('node_modules')) {\r\n        filelist = this.getConfigs(absolutePath, filelist);\r\n      } else if (absolutePath.endsWith('arbor.json')) {\r\n        filelist = filelist.concat(absolutePath);\r\n      }\r\n    }\r\n\r\n    return filelist;\r\n  }\r\n\r\n  private readProjects(configFiles: string[]): Promise<ProjectSchema[]> {\r\n    return new Promise<ProjectSchema[]>((resolve, reject) => {\r\n      const promises = configFiles\r\n        .map(configFile => this.readConfig(configFile));\r\n\r\n      Promise.all(promises)\r\n        .then(projects => resolve([].concat.apply([], projects)))\r\n        .catch(error => reject(error));\r\n    });\r\n  }\r\n\r\n  private readConfig(configFile: string): Promise<ProjectSchema[]> {\r\n    return new Promise<ProjectSchema[]>((resolve, reject) => {\r\n      fs.readFile(configFile, (error, data) => {\r\n        if (error) {\r\n          reject(error);\r\n        } else {\r\n          const projectPath = path.resolve(path.dirname(configFile));\r\n\r\n          let projects: ProjectSchema[] = JSON.parse(data.toString());\r\n          projects = Array.isArray(projects) ? projects : [projects];\r\n\r\n          for (const project of projects) {\r\n            project.projectPath = projectPath;\r\n          }\r\n\r\n          resolve(projects);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  private validateProjects(projects: ProjectSchema[]) {\r\n    const namePattern = /^[a-z0-9 -]+$/i;\r\n    const nameRule = 'must contain only letters, numbers, spaces, and dashes';\r\n\r\n    const taskOptionPattern = /^[a-z0-9,]+$/i;\r\n    const taskOptionRule = 'must contain only letters, numbers, and commas (for separation)';\r\n\r\n    for (const project of projects) {\r\n      if (namePattern.test(project.name) === false) {\r\n        bail(`Project names ${nameRule}. (project '${project.name}')`);\r\n      }\r\n\r\n      for (const taskName of Object.keys(project.tasks)) {\r\n        if (namePattern.test(taskName) === false) {\r\n          bail(`Task names ${nameRule}. ('${project.name}' project, '${taskName}' task)`);\r\n        }\r\n\r\n        const task = project.tasks[taskName];\r\n\r\n        const taskCommands = (Array.isArray(task) ? task : [task])\r\n          .map(command => typeof command === 'string' ? { command } : command);\r\n\r\n        for (const taskCommand of taskCommands) {\r\n          if (typeof taskCommand.command !== 'string') {\r\n            if (Object.keys(taskCommand.command).includes('') === false) {\r\n              bail(`Task must define a default command. ('${project.name}' project, '${taskName}' task)`);\r\n            }\r\n\r\n            for (const taskOption of Object.keys(taskCommand.command)) {\r\n              if (taskOption !== '' && taskOptionPattern.test(taskOption) === false) {\r\n                bail(`Task options ${taskOptionRule}. ('${project.name}' project, '${taskName}' task, '${taskOption}' option)`);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    const projectTaskNames = projects\r\n      .map(project => Object.keys(project.tasks).map(taskName => `${project.name}: ${taskName}`))\r\n      .reduce((acc, tasks) => acc.concat(tasks), []);\r\n\r\n    for (const projectTaskName of projectTaskNames) {\r\n      if (projectTaskNames.indexOf(projectTaskName) !== projectTaskNames.lastIndexOf(projectTaskName)) {\r\n        bail(`Task '${projectTaskName}' has duplicate definitions.`);\r\n      }\r\n    }\r\n\r\n    return projects;\r\n  }\r\n}\r\n","import chalk from 'chalk';\r\nimport { writeFileSync } from 'fs';\r\nimport { Injectable } from 'injection-js';\r\nimport * as path from 'path';\r\n\r\nimport { ScriptOptions } from './../commands/script.command';\r\nimport { Project } from './../interfaces/project';\r\nimport { DependencyGraphService } from './dependency-graph.service';\r\nimport { ProjectService } from './project.service';\r\nimport { TaskService } from './task.service';\r\nimport { VersionService } from './version.service';\r\n\r\n@Injectable()\r\nexport class ScriptService {\r\n  constructor(\r\n    private dependencyGraphService: DependencyGraphService,\r\n    private projectService: ProjectService,\r\n    private taskService: TaskService) { }\r\n\r\n  generateScript(taskFlags: string[], options: ScriptOptions) {\r\n    if (options.output === undefined) {\r\n      console.log(chalk.red('output path is required.'));\r\n    }\r\n\r\n    if (taskFlags.length) {\r\n      console.log(`Arbor v${VersionService.version}: scripting tasks ${taskFlags.join(', ')} in ${process.cwd()}`);\r\n\r\n      this.projectService.getProjects()\r\n        .then(projects => this.taskService.matchTasks(projects, taskFlags))\r\n        .then(projects => {\r\n          let script = 'echo off';\r\n\r\n          for (const taskFlag of taskFlags) {\r\n            script += this.generateTaskScript(taskFlag, projects);\r\n          }\r\n\r\n          script += `\r\ngoto success\r\n\r\n:error\r\necho;\r\necho ${this.colorEcho('*** There was an error in the above task. Exiting... ***', 31)}\r\nexit /b 1\r\n\r\n:success\r\nexit /b`;\r\n\r\n          if (options.dryRun) {\r\n            console.log();\r\n            console.log(chalk.green(`Dry run. '${options.output}' was not written.`));\r\n          } else {\r\n            writeFileSync(options.output, script);\r\n\r\n            console.log();\r\n            console.log(chalk.green(`'${options.output}' has been written.`));\r\n          }\r\n        });\r\n    }\r\n  }\r\n\r\n  private generateTaskScript(taskFlag: string, allProjects: Project[]) {\r\n    let script = '';\r\n\r\n    console.log();\r\n    console.log(`scripting ${taskFlag}:`);\r\n\r\n    const projects = this.dependencyGraphService.orderProjectsByDependencyGraph(allProjects.filter(project => project.tasks[taskFlag] !== undefined));\r\n\r\n    for (const project of projects) {\r\n      const task = project.tasks[taskFlag];\r\n\r\n      script += `\r\necho;\r\necho ${this.colorEcho(`*** Running task \"${taskFlag}\" in project \"${project.name}.\" ***`, 32)}`;\r\n\r\n      for (const command of task) {\r\n        let cwd: string;\r\n\r\n        if (command.cwd) {\r\n          cwd = path.normalize(path.join(project.projectPath, command.cwd));\r\n        } else if (project.cwd) {\r\n          cwd = path.normalize(path.join(project.projectPath, project.cwd));\r\n        } else {\r\n          cwd = project.projectPath;\r\n        }\r\n\r\n        console.log(`${chalk.gray(cwd)}> ${command.command}`);\r\n\r\n        script += `\r\necho;\r\necho ${this.colorEcho(`${cwd}^> ${command.command}`, 90)}\r\npushd ${cwd}\r\ncall ${command.command}\r\nif errorlevel 1 goto error\r\npopd`;\r\n      }\r\n    }\r\n\r\n    return script;\r\n  }\r\n\r\n  private colorEcho(message: string, color: number) {\r\n    // color code reference: https://gist.github.com/mlocati/fdabcaeb8071d5c75a2d51712db24011#file-win10colors-cmd\r\n    return `\u001b[${color}m${message}\u001b[0m`;\r\n  }\r\n}\r\n","import { fork, spawn, ForkOptions, SpawnOptions } from 'child_process';\r\nimport { Injectable } from 'injection-js';\r\nimport { Observable } from 'rxjs';\r\n\r\nexport interface ExecResult {\r\n  cwd: string;\r\n  command: string;\r\n  error: any;\r\n  stdout: string;\r\n  stderr: string;\r\n}\r\n\r\nexport interface ForkResult {\r\n  cwd: string;\r\n  modulePath: string;\r\n  error: any;\r\n}\r\n\r\n@Injectable()\r\nexport class ShellService {\r\n  constructor() { }\r\n\r\n  execute(command: string, options?: SpawnOptions, continuousCallback?: (result: ExecResult) => void): Promise<ExecResult> {\r\n    const cwd = options && options.cwd || process.cwd();\r\n\r\n    const commandAndArgs = process.platform === 'win32' ?\r\n      { command: 'cmd', args: ['/c', command] } : { command: 'sh', args: ['-c', command] };\r\n\r\n    return new Promise<ExecResult>((resolve, reject) => {\r\n      const result: ExecResult = { cwd, command, stdout: '', stderr: '', error: undefined };\r\n      const spawnedProcess = spawn(commandAndArgs.command, commandAndArgs.args, options);\r\n\r\n      spawnedProcess.stdout.on('data', data => { this.processData(result, data, false, continuousCallback); });\r\n      spawnedProcess.stderr.on('data', data => { this.processData(result, data, true, continuousCallback); });\r\n\r\n      let done = false;\r\n      const handleResult = (error: Error, code?: number, signal?: string) => {\r\n        if (done === false) {\r\n          result.error = error;\r\n\r\n          if (code !== 0) {\r\n            result.error = Object.assign({} , result.error || {}, { code, signal });\r\n          }\r\n\r\n          if (result.error !== undefined) {\r\n            reject(result);\r\n          } else {\r\n            resolve(result);\r\n          }\r\n\r\n          done = true;\r\n        }\r\n      };\r\n\r\n      spawnedProcess.on('error', (error: Error) => { handleResult(error); });\r\n      spawnedProcess.on('exit', (code, signal) => { handleResult(undefined, code, signal); });\r\n\r\n      return () => { spawnedProcess.kill(); };\r\n    });\r\n  }\r\n\r\n  fork(modulePath: string, args: string[], options?: ForkOptions, messageCallback?: (message: any) => Observable<void>): Promise<ForkResult> {\r\n    const cwd = options.cwd || process.cwd();\r\n\r\n    return new Promise<ForkResult>((resolve, reject) => {\r\n      const result: ForkResult = { cwd, modulePath, error: undefined };\r\n      const forkedProcess = fork(modulePath, args, { ...options });\r\n\r\n      let messagesWaiting = 0;\r\n\r\n      forkedProcess.on('message', message => {\r\n        if (messageCallback) {\r\n          messagesWaiting++;\r\n\r\n          messageCallback(message)\r\n          .subscribe({ complete: () => { messagesWaiting--; } });\r\n        }\r\n      });\r\n\r\n      let done = false;\r\n      const handleResult = (error: Error, code?: number, signal?: string) => {\r\n        if (done === false) {\r\n          if (messagesWaiting <= 0) {\r\n            result.error = error;\r\n\r\n            if (code !== 0) {\r\n              result.error = Object.assign({} , result.error || {}, { code, signal });\r\n            }\r\n\r\n            if (result.error !== undefined) {\r\n              reject(result);\r\n            } else {\r\n              resolve(result);\r\n            }\r\n\r\n            done = true;\r\n          } else {\r\n            setTimeout(() => { handleResult(error, code, signal); }, 100);\r\n          }\r\n        }\r\n      };\r\n\r\n      forkedProcess.on('error', (error: Error) => { handleResult(error); });\r\n      forkedProcess.on('exit', (code, signal) => { handleResult(undefined, code, signal); });\r\n\r\n      return () => { forkedProcess.kill(); };\r\n    });\r\n  }\r\n\r\n  private processData(result: ExecResult, data: string | Buffer, error: boolean, continuousCallback: (result: ExecResult) => void) {\r\n    const commandInfo = `${result.cwd}> ${result.command}`;\r\n    const output = this.readData(commandInfo, data);\r\n\r\n    if (error) {\r\n      result.stderr += output;\r\n    } else {\r\n      result.stdout += output;\r\n    }\r\n\r\n    if (continuousCallback) {\r\n      continuousCallback(result);\r\n    }\r\n  }\r\n\r\n  private readData(commandInfo: string, buffer: string | Buffer) {\r\n    let chunk = '';\r\n\r\n    if (buffer.length > 0) {\r\n      chunk = '<< String sent back was too long >>';\r\n      try {\r\n        chunk = buffer.toString();\r\n      } catch (e) {\r\n        chunk = `<< Lost chunk of process output for ${commandInfo} - length was ${buffer.length}>>`;\r\n      }\r\n    }\r\n\r\n    return chunk;\r\n  }\r\n}\r\n","import { Injectable } from 'injection-js';\r\nimport * as path from 'path';\r\n\r\nimport { RunOptions } from './../commands/run.command';\r\nimport { Project } from './../interfaces/project';\r\nimport { RunningTask, TaskStatus } from './../interfaces/running-task';\r\nimport { ConsoleService } from './../services/console.service';\r\nimport { ExecResult, ShellService } from './../services/shell.service';\r\nimport { DependencyGraphService } from './dependency-graph.service';\r\nimport { LogService } from './log.service';\r\nimport { ProgressService } from './progress.service';\r\nimport { ProjectService } from './project.service';\r\nimport { TaskService } from './task.service';\r\nimport { VersionService } from './version.service';\r\n\r\n@Injectable()\r\nexport class TaskRunnerService {\r\n  constructor(\r\n    private console: ConsoleService,\r\n    private dependencyGraphService: DependencyGraphService,\r\n    private logService: LogService,\r\n    private progressService: ProgressService,\r\n    private projectService: ProjectService,\r\n    private shell: ShellService,\r\n    private taskService: TaskService) {\r\n  }\r\n\r\n  runTasks(taskFlags: string[], options: RunOptions) {\r\n    this.console.log(`Arbor v${VersionService.version}: running tasks ${taskFlags.join(', ')} in ${process.cwd()}`);\r\n    this.console.log();\r\n\r\n    this.logService.deleteLogs();\r\n\r\n    if (taskFlags.length) {\r\n      this.projectService.getProjects()\r\n      .then(projects => this.taskService.matchTasks(projects, taskFlags))\r\n        .then(projects => {\r\n          const next = () => {\r\n            let taskPromise = Promise.resolve(void 0);\r\n\r\n            taskFlags.shift();\r\n\r\n            if (taskFlags.length) {\r\n              taskPromise = this.runTask(projects, taskFlags[0], options, next);\r\n            }\r\n\r\n            return taskPromise;\r\n          };\r\n\r\n          return this.runTask(projects, taskFlags[0], options, next);\r\n        });\r\n    }\r\n  }\r\n\r\n  runTask(projects: Project[], taskFlag: string, options: RunOptions, next: () => Promise<void>, projectNames?: string[]) {\r\n    this.console.log(`Task: ${taskFlag}`);\r\n\r\n    return this.startTasks(projects, taskFlag, projectNames)\r\n      .then(runningTasks => this.waitUntilTaskIsComplete(runningTasks))\r\n      .then(() => next())\r\n      .catch((runningTasks: RunningTask[]) => {\r\n        if (Array.isArray(runningTasks) === false) {\r\n          // `runningTasks` is actually an unhandled error.\r\n          console.log(runningTasks.toString());\r\n          process.exit(1);\r\n        }\r\n\r\n        let retryPromise = Promise.resolve({ runningTasks, response: '' });\r\n\r\n        if (options.retryPrompt) {\r\n          retryPromise = this.console.question('Task failed. Press \"y\" to restart all projects. Press \"f\" to restart failed projects. ')\r\n            .then(response => ({ runningTasks, response }));\r\n        }\r\n\r\n        return retryPromise;\r\n      })\r\n      .then(retry => {\r\n        if (retry) {\r\n          const response = retry.response;\r\n          const runningTasks = retry.runningTasks;\r\n\r\n          let taskPromise = Promise.resolve(void 0);\r\n\r\n          if (response === 'y') {\r\n            console.log('');\r\n            this.logService.deleteLogs();\r\n            taskPromise = this.runTask(projects, taskFlag, options, next);\r\n          } else if (response === 'f') {\r\n            const failedProjectNames = runningTasks\r\n              .filter(runningTask => runningTask.status === TaskStatus.Failed || runningTask.status === TaskStatus.DependendecyFailed)\r\n              .map(runningTask => runningTask.project.name);\r\n\r\n            console.log('');\r\n            this.logService.deleteLogs();\r\n            taskPromise = this.runTask(projects, taskFlag, options, next, failedProjectNames);\r\n          } else {\r\n            process.exit(1);\r\n          }\r\n\r\n          return taskPromise;\r\n        }\r\n      });\r\n  }\r\n\r\n  private startTasks(allProjects: Project[], taskFlag: string, projectNames?: string[]): Promise<RunningTask[]> {\r\n    return Promise.resolve(allProjects)\r\n      .then(projects => projects.filter(project => project.tasks[taskFlag] !== undefined))\r\n      .then(projects => projectNames === undefined ? projects : projects.filter(project => projectNames.some(n => project.name === n)))\r\n      .then(projects => this.dependencyGraphService.orderProjectsByDependencyGraph(projects))\r\n      .then(projects => {\r\n        const runningTasks: RunningTask[] = projects\r\n          .map(project => ({ project, taskFlag, status: TaskStatus.Waiting }));\r\n\r\n        const getRunningTask = (projectName: string) => runningTasks.find(runningTask => runningTask.project.name === projectName);\r\n\r\n        const next = () => {\r\n          const waitingTasks = runningTasks\r\n            .filter(runningTask =>  runningTask.status === TaskStatus.Waiting);\r\n\r\n          for (const runningTask of waitingTasks) {\r\n            const dependencies = (runningTask.project.dependencies ? runningTask.project.dependencies : [])\r\n              .map(dependency => getRunningTask(dependency))\r\n              .filter(dependency => dependency !== undefined);\r\n\r\n            const allDepenendenciesSucceeded = dependencies.length === 0 ||\r\n              dependencies.every(dependency => dependency.status === TaskStatus.Success);\r\n\r\n            const anyDepenendenciesFailed = dependencies.length > 0 &&\r\n              dependencies.some(dependency => dependency.status === TaskStatus.Failed);\r\n\r\n            const anyDepenendenciesBlocked = dependencies.length > 0 &&\r\n              dependencies.some(dependency => dependency.status === TaskStatus.DependendecyFailed);\r\n\r\n            if (allDepenendenciesSucceeded) {\r\n              this.startTask(runningTask)\r\n                .then(() => {\r\n                  runningTask.status = TaskStatus.Success;\r\n                  next();\r\n                })\r\n                .catch(() => {\r\n                  runningTask.status = TaskStatus.Failed;\r\n\r\n                  next();\r\n                });\r\n            } else if (anyDepenendenciesFailed || anyDepenendenciesBlocked) {\r\n              runningTask.status = TaskStatus.DependendecyFailed;\r\n            }\r\n          }\r\n        };\r\n\r\n        next();\r\n\r\n        return runningTasks;\r\n      });\r\n  }\r\n\r\n  private startTask(runningTask: RunningTask): Promise<ExecResult> {\r\n    runningTask.status = TaskStatus.InProgress;\r\n\r\n    const task = runningTask.project.tasks[runningTask.taskFlag];\r\n\r\n    let runCommands = Promise.resolve(undefined);\r\n\r\n    for (const command of task) {\r\n      runCommands = runCommands\r\n        .then(() => {\r\n          runningTask.statusText = command.status;\r\n        })\r\n        .then(() => {\r\n          const project = runningTask.project;\r\n          let cwd: string;\r\n\r\n          if (command.cwd) {\r\n            cwd = path.normalize(path.join(runningTask.project.projectPath, command.cwd));\r\n          } else if (project.cwd) {\r\n            cwd = path.normalize(path.join(runningTask.project.projectPath, project.cwd));\r\n          } else {\r\n            cwd = runningTask.project.projectPath;\r\n          }\r\n\r\n          return Promise.resolve(undefined)\r\n            .then(() => { runningTask.currentCommand = command; })\r\n            .then(() => this.shell.execute(command.command, { cwd }, result => { this.updateProgressLogLine(runningTask, result); }))\r\n            .then(result => { this.logCommandResult(runningTask, result); })\r\n            .catch(result => { this.logCommandResult(runningTask, result); throw result; });\r\n        });\r\n    }\r\n\r\n    return runCommands;\r\n  }\r\n\r\n  private updateProgressLogLine(runningTask: RunningTask, result: ExecResult) {\r\n    const progressPattern = /[0-9]+%/;\r\n\r\n    const output = this.formatOutput(result.stdout).trim();\r\n    const lastLine = output.substring(output.lastIndexOf('\\n'));\r\n\r\n    const stderr = this.formatOutput(result.stderr).trim();\r\n    const lastErrorLine = stderr.substring(stderr.lastIndexOf('\\n'));\r\n\r\n    runningTask.progressLogLine = progressPattern.test(lastErrorLine) ?\r\n      lastErrorLine.trim() :\r\n      (lastLine ? lastLine.trim() : undefined);\r\n  }\r\n\r\n  private waitUntilTaskIsComplete(runningTasks: RunningTask[]): Promise<RunningTask[]> {\r\n    return new Promise<RunningTask[]>((resolve, reject) => {\r\n      const interval = setInterval(() => {\r\n        this.progressService.updateRunningTasks(runningTasks);\r\n\r\n        const completedTasks = runningTasks\r\n          .filter(runningTask => runningTask.status !== TaskStatus.Waiting && runningTask.status !== TaskStatus.InProgress);\r\n\r\n        if (completedTasks.length === runningTasks.length) {\r\n          this.progressService.finalizeRunningTasks();\r\n\r\n          clearInterval(interval);\r\n\r\n          const allTasksSucceeded = runningTasks.every(runningTask => runningTask.status === TaskStatus.Success);\r\n\r\n          if (allTasksSucceeded) {\r\n            resolve(runningTasks);\r\n          } else {\r\n            reject(runningTasks);\r\n          }\r\n        }\r\n      }, 100);\r\n    });\r\n  }\r\n\r\n  private logCommandResult(runningTask: RunningTask, result: ExecResult) {\r\n    const logText = runningTask ? this.getLogText(runningTask, result) : undefined;\r\n    const isError = result.error !== undefined;\r\n    this.logService.log(logText, isError);\r\n  }\r\n\r\n  private getLogText(runningTask: RunningTask, result: ExecResult) {\r\n    return `\r\n------------------------------------------------------------------------------------------\r\nConfig: ${path.join(runningTask.project.projectPath, 'arbor.json')}\r\nProject: ${runningTask.project.name}\r\nTask: ${runningTask.taskFlag}\r\nCommand: ${result.cwd}> ${result.command}\r\n\r\n${result.error ? `* Error:\\n${JSON.stringify(result.error)}\\n` : ''}\r\n${result.stdout ? `* Standard Output:\\n${this.formatOutput(result.stdout)}\\n` : ''}\r\n${result.stderr ? `* Standard Error:\\n${this.formatOutput(result.stderr)}\\n` : ''}\r\n------------------------------------------------------------------------------------------`;\r\n  }\r\n\r\n  private formatOutput(output: string) {\r\n    const backspaces = /[\\b][\\b|\\s]+[\\b]/g;\r\n\r\n    return output\r\n      .replace(backspaces, '\\n')\r\n      .trim();\r\n  }\r\n}\r\n","import { Injectable } from 'injection-js';\r\n\r\nimport { bail } from './../helpers/error.helpers';\r\nimport { SimpleMap } from './../helpers/object.helpers';\r\nimport { Project, ProjectSchema, TaskCommand, TaskCommandSchema, TaskSchema } from './../interfaces/project';\r\n\r\ninterface TaskToRun {\r\n  name: string;\r\n  options: string[];\r\n  taskFlag: string;\r\n}\r\n\r\n@Injectable()\r\nexport class TaskService {\r\n  constructor() {\r\n  }\r\n\r\n  matchTasks(projectDefinitions: ProjectSchema[], taskFlags: string[]) {\r\n    const knownTaskNames = projectDefinitions\r\n      .map(project => Object.keys(project.tasks))\r\n      .reduce((previous, current) => previous.concat(current), [])\r\n      .filter((value, index, self) => self.indexOf(value) === index);\r\n\r\n    const tasksToRun = this.parseTaskFlags(taskFlags);\r\n\r\n    for (const taskToRun of tasksToRun) {\r\n      if (knownTaskNames.includes(taskToRun.name) === false) {\r\n        bail(`Task '${taskToRun.name}' is not defined in any project.`);\r\n      }\r\n    }\r\n\r\n    const projects = projectDefinitions\r\n      .filter(project => tasksToRun.some(taskToRun => Object.keys(project.tasks).includes(taskToRun.name)))\r\n      .map(project => this.convertProjectSchemaToProject(project, tasksToRun))\r\n      .filter(project => Object.keys(project.tasks).length > 0);\r\n\r\n    const matchedTaskFlags = projects\r\n      .map(project => Object.keys(project.tasks).map(taskFlag => project.tasks[taskFlag]))\r\n      .reduce((previous, current) => previous.concat(current), [])\r\n      .map(taskCommands => taskCommands.map(taskCommand => taskCommand.option ? `${taskCommand.taskName}:${taskCommand.option}` : taskCommand.taskName))\r\n      .reduce((previous, current) => previous.concat(current), [])\r\n      .filter((value, index, self) => self.indexOf(value) === index);\r\n\r\n    for (const taskToRun of tasksToRun) {\r\n      if (matchedTaskFlags.includes(taskToRun.taskFlag) === false) {\r\n        bail(`Task '${taskToRun.name}' is not defined with option '${taskToRun.options.join()}' in any project.`);\r\n      }\r\n    }\r\n\r\n    return projects;\r\n  }\r\n\r\n  private parseTaskFlags(taskFlags: string[]) {\r\n    return taskFlags\r\n      .map(taskFlag => taskFlag.match(/^([a-z0-9 -]+):?([a-z0-0,]+)?$/))\r\n      .map(taskFlagMatch => ({ taskFlag: taskFlagMatch[0], name: taskFlagMatch[1], options: (taskFlagMatch[2] || '').split(',') } as TaskToRun));\r\n  }\r\n\r\n  private convertProjectSchemaToProject(projectDefinition: ProjectSchema, tasksToRun: TaskToRun[]) {\r\n    const convertTaskCommand = (taskCommand: TaskCommandSchema, taskToRun: TaskToRun) => ({\r\n      ...taskCommand,\r\n      ...(typeof taskCommand.command === 'string' ? { command: taskCommand.command, option: undefined } : this.matchCommand(taskCommand.command, taskToRun)),\r\n      taskName: taskToRun.name\r\n    });\r\n\r\n    const convertTask = (task: TaskSchema, taskToRun: TaskToRun) => (Array.isArray(task) ? task : [task])\r\n      .map(command => convertTaskCommand(typeof command === 'string' ? { command } : command, taskToRun));\r\n\r\n    const tasks = Object.keys(projectDefinition.tasks)\r\n      .map(taskName => tasksToRun.find(taskToRun => taskToRun.name === taskName))\r\n      .filter(taskToRun => taskToRun !== undefined)\r\n      .reduce((acc, taskToRun) => ({ ...acc, [taskToRun.taskFlag]: convertTask(projectDefinition.tasks[taskToRun.name], taskToRun) }), {} as SimpleMap<TaskCommand[]>);\r\n\r\n    return { ...projectDefinition, tasks } as Project;\r\n  }\r\n\r\n  private matchCommand(commandMap: SimpleMap<string>, taskToRun: TaskToRun) {\r\n    const candidateKeys = [];\r\n\r\n    for (let length = taskToRun.options.length; length >= 0; length--) {\r\n      candidateKeys.push(taskToRun.options.slice(0, length).join());\r\n    }\r\n\r\n    let command: string;\r\n    let option: string;\r\n\r\n    for (const candidateKey of candidateKeys) {\r\n      const candidateCommand = commandMap[candidateKey];\r\n\r\n      if (command === undefined && candidateCommand) {\r\n        command = candidateCommand;\r\n        option = candidateKey;\r\n      }\r\n    }\r\n\r\n    return { command, option };\r\n  }\r\n}\r\n","import chalk from 'chalk';\r\nimport { Injectable } from 'injection-js';\r\n\r\nimport { ConsoleService } from './console.service';\r\nimport { ShellService } from './shell.service';\r\n\r\n@Injectable()\r\nexport class VersionService {\r\n  static readonly version: string = require('./../../package.json').version;\r\n\r\n  constructor(private console: ConsoleService, private shell: ShellService) {\r\n  }\r\n\r\n  checkForUpdate(packageName: string) {\r\n    return this.shell.execute(`npm show ${packageName} version`, {})\r\n      .then(result => result.stdout.replace(/(\\r\\n|\\n|\\r)/gm, ''))\r\n      .then(latestVersion => { this.showUpdateMessage(latestVersion, packageName); })\r\n      .catch(() => Promise.resolve(void 0))\r\n      .then(() => Promise.resolve(void 0));\r\n  }\r\n\r\n  private showUpdateMessage(latestVersion: string, packageName: string) {\r\n    if (VersionService.version !== latestVersion) {\r\n      this.console.log(`\r\n  New version available. Run ${chalk.yellow(`npm install -g ${packageName}`)} to update.\r\n  Local Version: ${VersionService.version}\r\n  Latest Version: ${latestVersion}\r\n      `);\r\n    }\r\n  }\r\n}\r\n","module.exports = require(\"chalk\");","module.exports = require(\"child_process\");","module.exports = require(\"dependency-graph\");","module.exports = require(\"fs\");","module.exports = require(\"injection-js\");","module.exports = require(\"path\");","module.exports = require(\"readline\");","module.exports = require(\"reflect-metadata\");","module.exports = require(\"yargs\");"],"sourceRoot":""}